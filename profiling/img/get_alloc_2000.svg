<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (1,944 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.05%)</title><rect x="10.0" y="499.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.05%)</title><rect x="10.0" y="483.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,943 samples, 99.95%)</title><rect x="10.6" y="499.0" width="1179.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.6" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (9 samples, 0.46%)</title><rect x="10.6" y="483.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.41%)</title><rect x="10.6" y="467.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.6" y="478.0"></text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (2 samples, 0.10%)</title><rect x="10.6" y="451.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.6" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (1 samples, 0.05%)</title><rect x="11.8" y="451.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.26%)</title><rect x="12.4" y="451.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.26%)</title><rect x="12.4" y="435.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.26%)</title><rect x="12.4" y="419.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="430.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (5 samples, 0.26%)</title><rect x="12.4" y="403.0" width="3.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="15.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.05%)</title><rect x="15.5" y="467.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.05%)</title><rect x="15.5" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.05%)</title><rect x="15.5" y="435.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.05%)</title><rect x="15.5" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.05%)</title><rect x="15.5" y="403.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.05%)</title><rect x="15.5" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="15.5" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="15.5" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.05%)</title><rect x="15.5" y="339.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.5" y="350.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (1 samples, 0.05%)</title><rect x="15.5" y="323.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="18.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,934 samples, 99.49%)</title><rect x="16.1" y="483.0" width="1173.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.1" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,934 samples, 99.49%)</title><rect x="16.1" y="467.0" width="1173.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,932 samples, 99.38%)</title><rect x="16.1" y="451.0" width="1172.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.1" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,908 samples, 98.15%)</title><rect x="16.1" y="435.0" width="1158.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,908 samples, 98.15%)</title><rect x="16.1" y="419.0" width="1158.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.1" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_getValue.handleRequest (1,905 samples, 97.99%)</title><rect x="16.1" y="403.0" width="1156.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="414.0">RequestHandler1_getValue.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.15%)</title><rect x="16.1" y="387.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3 samples, 0.15%)</title><rect x="16.1" y="371.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.10%)</title><rect x="16.1" y="355.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.10%)</title><rect x="16.1" y="339.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.1" y="350.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.10%)</title><rect x="16.1" y="323.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="19.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.05%)</title><rect x="17.3" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.3" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1 samples, 0.05%)</title><rect x="17.3" y="339.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="20.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 0.15%)</title><rect x="17.9" y="387.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.15%)</title><rect x="17.9" y="371.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.15%)</title><rect x="17.9" y="355.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.15%)</title><rect x="17.9" y="339.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.9" y="350.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.10%)</title><rect x="17.9" y="323.0" width="1.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="20.9" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="19.1" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="334.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.05%)</title><rect x="19.1" y="307.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="22.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/jhoysbou/LsmServer.getValue (1,899 samples, 97.69%)</title><rect x="19.7" y="387.0" width="1152.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.7" y="398.0">ru/mail/polis/service/jhoysbou/LsmServer.getValue</text>
</g>
<g>
<title>byte[] (2 samples, 0.10%)</title><rect x="19.7" y="371.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="22.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.26%)</title><rect x="20.9" y="371.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.26%)</title><rect x="20.9" y="355.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.26%)</title><rect x="20.9" y="339.0" width="3.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="23.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (8 samples, 0.41%)</title><rect x="24.0" y="371.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.0" y="382.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.15%)</title><rect x="24.0" y="355.0" width="1.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="27.0" y="366.0"></text>
</g>
<g>
<title>java.lang.String[] (3 samples, 0.15%)</title><rect x="25.8" y="355.0" width="1.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="28.8" y="366.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.10%)</title><rect x="27.6" y="355.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="30.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,884 samples, 96.91%)</title><rect x="28.8" y="371.0" width="1143.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (30 samples, 1.54%)</title><rect x="28.8" y="355.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 1.54%)</title><rect x="28.8" y="339.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 1.54%)</title><rect x="28.8" y="323.0" width="18.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (30 samples, 1.54%)</title><rect x="28.8" y="307.0" width="18.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (30 samples, 1.54%)</title><rect x="28.8" y="291.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (30 samples, 1.54%)</title><rect x="28.8" y="275.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.8" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (30 samples, 1.54%)</title><rect x="28.8" y="259.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.8" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (30 samples, 1.54%)</title><rect x="28.8" y="243.0" width="18.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (30 samples, 1.54%)</title><rect x="28.8" y="227.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.8" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (30 samples, 1.54%)</title><rect x="28.8" y="211.0" width="18.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 1.54%)</title><rect x="28.8" y="195.0" width="18.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.8" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 1.54%)</title><rect x="28.8" y="179.0" width="18.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.8" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (30 samples, 1.54%)</title><rect x="28.8" y="163.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (30 samples, 1.54%)</title><rect x="28.8" y="147.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (30 samples, 1.54%)</title><rect x="28.8" y="131.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getCell (30 samples, 1.54%)</title><rect x="28.8" y="115.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 0.72%)</title><rect x="28.8" y="99.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.31%)</title><rect x="28.8" y="83.0" width="3.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="31.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.41%)</title><rect x="32.5" y="83.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="94.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.41%)</title><rect x="32.5" y="67.0" width="4.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="35.5" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Cell (1 samples, 0.05%)</title><rect x="37.3" y="99.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="40.3" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Value (2 samples, 0.10%)</title><rect x="37.9" y="99.0" width="1.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="40.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getKey (10 samples, 0.51%)</title><rect x="39.1" y="99.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.31%)</title><rect x="39.1" y="83.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.26%)</title><rect x="39.1" y="67.0" width="3.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="42.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="42.2" y="67.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.2" y="78.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.05%)</title><rect x="42.2" y="51.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="45.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (4 samples, 0.21%)</title><rect x="42.8" y="83.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.21%)</title><rect x="42.8" y="67.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.8" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.10%)</title><rect x="42.8" y="51.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="45.8" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="44.0" y="51.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.0" y="62.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.10%)</title><rect x="44.0" y="35.0" width="1.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="47.0" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (2 samples, 0.10%)</title><rect x="45.2" y="99.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.10%)</title><rect x="45.2" y="83.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.2" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="45.2" y="67.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.2" y="78.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.10%)</title><rect x="45.2" y="51.0" width="1.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="48.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/Value.&lt;init&gt; (1 samples, 0.05%)</title><rect x="46.4" y="99.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.4" y="110.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.05%)</title><rect x="46.4" y="83.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.4" y="94.0"></text>
</g>
<g>
<title>java.util.Optional (1 samples, 0.05%)</title><rect x="46.4" y="67.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="49.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (3 samples, 0.15%)</title><rect x="47.0" y="355.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.15%)</title><rect x="47.0" y="339.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.15%)</title><rect x="47.0" y="323.0" width="1.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="50.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (7 samples, 0.36%)</title><rect x="48.8" y="355.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (7 samples, 0.36%)</title><rect x="48.8" y="339.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (7 samples, 0.36%)</title><rect x="48.8" y="323.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.36%)</title><rect x="48.8" y="307.0" width="4.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="51.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao.iterator (1,844 samples, 94.86%)</title><rect x="53.1" y="355.0" width="1119.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.1" y="366.0">ru/mail/polis/dao/jhoysbou/LsmDao.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (1 samples, 0.05%)</title><rect x="53.1" y="339.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.1" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (1 samples, 0.05%)</title><rect x="53.1" y="323.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="56.1" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (236 samples, 12.14%)</title><rect x="53.7" y="339.0" width="143.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.7" y="350.0">com/google/common/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (2 samples, 0.10%)</title><rect x="53.7" y="323.0" width="1.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="56.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (234 samples, 12.04%)</title><rect x="54.9" y="323.0" width="142.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.9" y="334.0">com/google/common/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (1 samples, 0.05%)</title><rect x="54.9" y="307.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="57.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (9 samples, 0.46%)</title><rect x="55.5" y="307.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.5" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (9 samples, 0.46%)</title><rect x="55.5" y="291.0" width="5.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="58.5" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.15%)</title><rect x="61.0" y="307.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.0" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.15%)</title><rect x="61.0" y="291.0" width="1.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="64.0" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (206 samples, 10.60%)</title><rect x="62.8" y="307.0" width="125.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.8" y="318.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (206 samples, 10.60%)</title><rect x="62.8" y="291.0" width="125.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.8" y="302.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.15%)</title><rect x="62.8" y="275.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.8" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.15%)</title><rect x="62.8" y="259.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.8" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.15%)</title><rect x="62.8" y="243.0" width="1.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="65.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (203 samples, 10.44%)</title><rect x="64.6" y="275.0" width="123.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.6" y="286.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (203 samples, 10.44%)</title><rect x="64.6" y="259.0" width="123.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.6" y="270.0">java/util/Prior..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (203 samples, 10.44%)</title><rect x="64.6" y="243.0" width="123.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.6" y="254.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (203 samples, 10.44%)</title><rect x="64.6" y="227.0" width="123.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.6" y="238.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (203 samples, 10.44%)</title><rect x="64.6" y="211.0" width="123.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.6" y="222.0">com/google/comm..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (203 samples, 10.44%)</title><rect x="64.6" y="195.0" width="123.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="67.6" y="206.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (203 samples, 10.44%)</title><rect x="64.6" y="179.0" width="123.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.6" y="190.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getCell (203 samples, 10.44%)</title><rect x="64.6" y="163.0" width="123.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.6" y="174.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (71 samples, 3.65%)</title><rect x="64.6" y="147.0" width="43.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.6" y="158.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (47 samples, 2.42%)</title><rect x="64.6" y="131.0" width="28.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="67.6" y="142.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 1.23%)</title><rect x="93.2" y="131.0" width="14.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.2" y="142.0"></text>
</g>
<g>
<title>byte[] (24 samples, 1.23%)</title><rect x="93.2" y="115.0" width="14.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="96.2" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Cell (4 samples, 0.21%)</title><rect x="107.7" y="147.0" width="2.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="110.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Value (15 samples, 0.77%)</title><rect x="110.2" y="147.0" width="9.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="113.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getKey (80 samples, 4.12%)</title><rect x="119.3" y="147.0" width="48.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.3" y="158.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (54 samples, 2.78%)</title><rect x="119.3" y="131.0" width="32.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.3" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 1.90%)</title><rect x="119.3" y="115.0" width="22.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="122.3" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.87%)</title><rect x="141.7" y="115.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.7" y="126.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.87%)</title><rect x="141.7" y="99.0" width="10.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="144.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (26 samples, 1.34%)</title><rect x="152.0" y="131.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (26 samples, 1.34%)</title><rect x="152.0" y="115.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.0" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19 samples, 0.98%)</title><rect x="152.0" y="99.0" width="11.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="155.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.36%)</title><rect x="163.6" y="99.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.6" y="110.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.36%)</title><rect x="163.6" y="83.0" width="4.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="166.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (26 samples, 1.34%)</title><rect x="167.8" y="147.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (26 samples, 1.34%)</title><rect x="167.8" y="131.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.8" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 1.03%)</title><rect x="167.8" y="115.0" width="12.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="170.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.31%)</title><rect x="180.0" y="115.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.0" y="126.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.31%)</title><rect x="180.0" y="99.0" width="3.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="183.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/Value.&lt;init&gt; (7 samples, 0.36%)</title><rect x="183.6" y="147.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.6" y="158.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.36%)</title><rect x="183.6" y="131.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.6" y="142.0"></text>
</g>
<g>
<title>java.util.Optional (7 samples, 0.36%)</title><rect x="183.6" y="115.0" width="4.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="186.6" y="126.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (15 samples, 0.77%)</title><rect x="187.8" y="307.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.8" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (15 samples, 0.77%)</title><rect x="187.8" y="291.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.8" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (15 samples, 0.77%)</title><rect x="187.8" y="275.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.8" y="286.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (3 samples, 0.15%)</title><rect x="187.8" y="259.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.8" y="270.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (3 samples, 0.15%)</title><rect x="187.8" y="243.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.8" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (3 samples, 0.15%)</title><rect x="187.8" y="227.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.8" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (3 samples, 0.15%)</title><rect x="187.8" y="211.0" width="1.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="190.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (12 samples, 0.62%)</title><rect x="189.7" y="259.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.7" y="270.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (4 samples, 0.21%)</title><rect x="189.7" y="243.0" width="2.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="192.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.15%)</title><rect x="192.1" y="243.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.15%)</title><rect x="192.1" y="227.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$65/189019485.get$Lambda (2 samples, 0.10%)</title><rect x="192.1" y="211.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.1" y="222.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$65 (2 samples, 0.10%)</title><rect x="192.1" y="195.0" width="1.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="195.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$66/1796733266.get$Lambda (1 samples, 0.05%)</title><rect x="193.3" y="211.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="222.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$66 (1 samples, 0.05%)</title><rect x="193.3" y="195.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="196.3" y="206.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.05%)</title><rect x="193.9" y="243.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.05%)</title><rect x="193.9" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.9" y="238.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (1 samples, 0.05%)</title><rect x="193.9" y="211.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="196.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (4 samples, 0.21%)</title><rect x="194.5" y="243.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.5" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.21%)</title><rect x="194.5" y="227.0" width="2.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="197.5" y="238.0"></text>
</g>
<g>
<title>java.util.ArrayList (5 samples, 0.26%)</title><rect x="197.0" y="339.0" width="3.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="200.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,539 samples, 79.17%)</title><rect x="200.0" y="339.0" width="934.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.0" y="350.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (8 samples, 0.41%)</title><rect x="200.0" y="323.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.0" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (8 samples, 0.41%)</title><rect x="200.0" y="307.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.0" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (8 samples, 0.41%)</title><rect x="200.0" y="291.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.0" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (8 samples, 0.41%)</title><rect x="200.0" y="275.0" width="4.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="203.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao$$Lambda$71/742278395.accept (1,531 samples, 78.76%)</title><rect x="204.8" y="323.0" width="929.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.8" y="334.0">ru/mail/polis/dao/jhoysbou/LsmDao$$Lambda$71/742278395.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao.lambda$iterator$2 (1,531 samples, 78.76%)</title><rect x="204.8" y="307.0" width="929.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.8" y="318.0">ru/mail/polis/dao/jhoysbou/LsmDao.lambda$iterator$2</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.iterator (1,531 samples, 78.76%)</title><rect x="204.8" y="291.0" width="929.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.8" y="302.0">ru/mail/polis/dao/jhoysbou/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.SSTable$1 (6 samples, 0.31%)</title><rect x="204.8" y="275.0" width="3.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="207.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.&lt;init&gt; (1,525 samples, 78.45%)</title><rect x="208.5" y="275.0" width="925.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.5" y="286.0">ru/mail/polis/dao/jhoysbou/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.binarySearch (1,525 samples, 78.45%)</title><rect x="208.5" y="259.0" width="925.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.5" y="270.0">ru/mail/polis/dao/jhoysbou/SSTable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getKey (1,525 samples, 78.45%)</title><rect x="208.5" y="243.0" width="925.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.5" y="254.0">ru/mail/polis/dao/jhoysbou/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,025 samples, 52.73%)</title><rect x="208.5" y="227.0" width="622.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.5" y="238.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (623 samples, 32.05%)</title><rect x="208.5" y="211.0" width="378.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="211.5" y="222.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (402 samples, 20.68%)</title><rect x="586.6" y="211.0" width="244.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.6" y="222.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (402 samples, 20.68%)</title><rect x="586.6" y="195.0" width="244.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="589.6" y="206.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (500 samples, 25.72%)</title><rect x="830.7" y="227.0" width="303.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.7" y="238.0">ru/mail/polis/dao/jhoysbou/SSTable.getOff..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (500 samples, 25.72%)</title><rect x="830.7" y="211.0" width="303.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.7" y="222.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (305 samples, 15.69%)</title><rect x="830.7" y="195.0" width="185.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="833.7" y="206.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (195 samples, 10.03%)</title><rect x="1015.8" y="195.0" width="118.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1018.8" y="206.0">java/nio/HeapB..</text>
</g>
<g>
<title>byte[] (195 samples, 10.03%)</title><rect x="1015.8" y="179.0" width="118.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1018.8" y="190.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.10%)</title><rect x="1134.2" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1137.2" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.10%)</title><rect x="1134.2" y="323.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1137.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao$$Lambda$71/742278395.get$Lambda (2 samples, 0.10%)</title><rect x="1134.2" y="307.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.2" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.LsmDao$$Lambda$71 (2 samples, 0.10%)</title><rect x="1134.2" y="291.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1137.2" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1135.4" y="339.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.4" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (2 samples, 0.10%)</title><rect x="1135.4" y="323.0" width="1.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1138.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (35 samples, 1.80%)</title><rect x="1136.6" y="339.0" width="21.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1139.6" y="350.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (35 samples, 1.80%)</title><rect x="1136.6" y="323.0" width="21.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1139.6" y="334.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (35 samples, 1.80%)</title><rect x="1136.6" y="307.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1139.6" y="318.0">c..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (35 samples, 1.80%)</title><rect x="1136.6" y="291.0" width="21.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1139.6" y="302.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (35 samples, 1.80%)</title><rect x="1136.6" y="275.0" width="21.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1139.6" y="286.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (35 samples, 1.80%)</title><rect x="1136.6" y="259.0" width="21.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.6" y="270.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (35 samples, 1.80%)</title><rect x="1136.6" y="243.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1139.6" y="254.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (35 samples, 1.80%)</title><rect x="1136.6" y="227.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1139.6" y="238.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (35 samples, 1.80%)</title><rect x="1136.6" y="211.0" width="21.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1139.6" y="222.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (35 samples, 1.80%)</title><rect x="1136.6" y="195.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1139.6" y="206.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (35 samples, 1.80%)</title><rect x="1136.6" y="179.0" width="21.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1139.6" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable$1.next (35 samples, 1.80%)</title><rect x="1136.6" y="163.0" width="21.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1139.6" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getCell (35 samples, 1.80%)</title><rect x="1136.6" y="147.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1139.6" y="158.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11 samples, 0.57%)</title><rect x="1136.6" y="131.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1139.6" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.36%)</title><rect x="1136.6" y="115.0" width="4.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1139.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.21%)</title><rect x="1140.8" y="115.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1143.8" y="126.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.21%)</title><rect x="1140.8" y="99.0" width="2.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1143.8" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Cell (1 samples, 0.05%)</title><rect x="1143.3" y="131.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1146.3" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Value (2 samples, 0.10%)</title><rect x="1143.9" y="131.0" width="1.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1146.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getKey (13 samples, 0.67%)</title><rect x="1145.1" y="131.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1148.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (12 samples, 0.62%)</title><rect x="1145.1" y="115.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1148.1" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.46%)</title><rect x="1145.1" y="99.0" width="5.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1148.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1150.5" y="99.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1153.5" y="110.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.15%)</title><rect x="1150.5" y="83.0" width="1.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1153.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (1 samples, 0.05%)</title><rect x="1152.4" y="115.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1155.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="1152.4" y="99.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1155.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1 samples, 0.05%)</title><rect x="1152.4" y="83.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1155.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.getOffset (5 samples, 0.26%)</title><rect x="1153.0" y="131.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1156.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.26%)</title><rect x="1153.0" y="115.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.0" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.21%)</title><rect x="1153.0" y="99.0" width="2.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1156.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1155.4" y="99.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1158.4" y="110.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.05%)</title><rect x="1155.4" y="83.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1158.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/Value.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1156.0" y="131.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.15%)</title><rect x="1156.0" y="115.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>java.util.Optional (3 samples, 0.15%)</title><rect x="1156.0" y="99.0" width="1.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/MemTable.iterator (24 samples, 1.23%)</title><rect x="1157.8" y="339.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (7 samples, 0.36%)</title><rect x="1157.8" y="323.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1160.8" y="334.0"></text>
</g>
<g>
<title>java/util/Set.spliterator (3 samples, 0.15%)</title><rect x="1157.8" y="307.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1160.8" y="318.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (3 samples, 0.15%)</title><rect x="1157.8" y="291.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>java.util.Spliterators$IteratorSpliterator (3 samples, 0.15%)</title><rect x="1157.8" y="275.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1160.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (4 samples, 0.21%)</title><rect x="1159.7" y="307.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1162.7" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (4 samples, 0.21%)</title><rect x="1159.7" y="291.0" width="2.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1162.7" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (4 samples, 0.21%)</title><rect x="1162.1" y="323.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1165.1" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (4 samples, 0.21%)</title><rect x="1162.1" y="307.0" width="2.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1165.1" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.10%)</title><rect x="1164.5" y="323.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1167.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.10%)</title><rect x="1164.5" y="307.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1167.5" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (2 samples, 0.10%)</title><rect x="1164.5" y="291.0" width="1.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1167.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (9 samples, 0.46%)</title><rect x="1165.7" y="323.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1168.7" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (3 samples, 0.15%)</title><rect x="1165.7" y="307.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1168.7" y="318.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (3 samples, 0.15%)</title><rect x="1165.7" y="291.0" width="1.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1168.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (6 samples, 0.31%)</title><rect x="1167.5" y="307.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.10%)</title><rect x="1167.5" y="291.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.10%)</title><rect x="1167.5" y="275.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$64/1187743641.get$Lambda (2 samples, 0.10%)</title><rect x="1167.5" y="259.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$64 (2 samples, 0.10%)</title><rect x="1167.5" y="243.0" width="1.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1170.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (4 samples, 0.21%)</title><rect x="1168.8" y="291.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1171.8" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (4 samples, 0.21%)</title><rect x="1168.8" y="275.0" width="2.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1171.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2 samples, 0.10%)</title><rect x="1171.2" y="323.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1174.2" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (2 samples, 0.10%)</title><rect x="1171.2" y="307.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.15%)</title><rect x="1172.4" y="403.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1175.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.15%)</title><rect x="1172.4" y="387.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1175.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.15%)</title><rect x="1172.4" y="371.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1175.4" y="382.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.10%)</title><rect x="1172.4" y="355.0" width="1.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1175.4" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="1173.6" y="355.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.6" y="366.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.05%)</title><rect x="1173.6" y="339.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1176.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (19 samples, 0.98%)</title><rect x="1174.2" y="435.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1177.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.51%)</title><rect x="1174.2" y="419.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.2" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.51%)</title><rect x="1174.2" y="403.0" width="6.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1177.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.46%)</title><rect x="1180.3" y="419.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.46%)</title><rect x="1180.3" y="403.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>char[] (2 samples, 0.10%)</title><rect x="1180.3" y="387.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.36%)</title><rect x="1181.5" y="387.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.36%)</title><rect x="1181.5" y="371.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7 samples, 0.36%)</title><rect x="1181.5" y="355.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.36%)</title><rect x="1181.5" y="339.0" width="4.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.26%)</title><rect x="1185.8" y="435.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.26%)</title><rect x="1185.8" y="419.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>char[] (1 samples, 0.05%)</title><rect x="1185.8" y="403.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.05%)</title><rect x="1186.4" y="403.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1189.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1187.0" y="403.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1190.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1187.0" y="387.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1190.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.15%)</title><rect x="1187.0" y="371.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1190.0" y="382.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.15%)</title><rect x="1187.0" y="355.0" width="1.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1190.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.10%)</title><rect x="1188.8" y="451.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.8" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.10%)</title><rect x="1188.8" y="435.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1191.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.10%)</title><rect x="1188.8" y="419.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1191.8" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.10%)</title><rect x="1188.8" y="403.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1191.8" y="414.0"></text>
</g>
</g>
</svg>
