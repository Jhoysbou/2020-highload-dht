<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (914 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (914 samples, 100.00%)</title><rect x="10.0" y="291.0" width="1180.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="302.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (38 samples, 4.16%)</title><rect x="10.0" y="275.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="286.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (20 samples, 2.19%)</title><rect x="10.0" y="259.0" width="25.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="270.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (18 samples, 1.97%)</title><rect x="10.0" y="243.0" width="23.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="13.0" y="254.0">o..</text>
</g>
<g>
<title>one.nio.net.Session[] (2 samples, 0.22%)</title><rect x="33.2" y="243.0" width="2.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="36.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (18 samples, 1.97%)</title><rect x="35.8" y="259.0" width="23.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.8" y="270.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (18 samples, 1.97%)</title><rect x="35.8" y="243.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.8" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (18 samples, 1.97%)</title><rect x="35.8" y="227.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.8" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (18 samples, 1.97%)</title><rect x="35.8" y="211.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.8" y="222.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (18 samples, 1.97%)</title><rect x="35.8" y="195.0" width="23.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.8" y="206.0">s..</text>
</g>
<g>
<title>java/util/HashSet.add (18 samples, 1.97%)</title><rect x="35.8" y="179.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.8" y="190.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 1.97%)</title><rect x="35.8" y="163.0" width="23.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.8" y="174.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 1.97%)</title><rect x="35.8" y="147.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="38.8" y="158.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (18 samples, 1.97%)</title><rect x="35.8" y="131.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.8" y="142.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (18 samples, 1.97%)</title><rect x="35.8" y="115.0" width="23.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="38.8" y="126.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.process (876 samples, 95.84%)</title><rect x="59.1" y="275.0" width="1130.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.1" y="286.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (876 samples, 95.84%)</title><rect x="59.1" y="259.0" width="1130.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.1" y="270.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (858 samples, 93.87%)</title><rect x="59.1" y="243.0" width="1107.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.1" y="254.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (635 samples, 69.47%)</title><rect x="59.1" y="227.0" width="819.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.1" y="238.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (635 samples, 69.47%)</title><rect x="59.1" y="211.0" width="819.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.1" y="222.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_putValue.handleRequest (617 samples, 67.51%)</title><rect x="59.1" y="195.0" width="796.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.1" y="206.0">RequestHandler3_putValue.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (72 samples, 7.88%)</title><rect x="59.1" y="179.0" width="92.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.1" y="190.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (72 samples, 7.88%)</title><rect x="59.1" y="163.0" width="92.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.1" y="174.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (17 samples, 1.86%)</title><rect x="59.1" y="147.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.1" y="158.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (17 samples, 1.86%)</title><rect x="59.1" y="131.0" width="21.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.1" y="142.0">o..</text>
</g>
<g>
<title>byte[] (17 samples, 1.86%)</title><rect x="59.1" y="115.0" width="21.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="62.1" y="126.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 6.02%)</title><rect x="81.0" y="147.0" width="71.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.0" y="158.0">one/nio/..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (37 samples, 4.05%)</title><rect x="81.0" y="131.0" width="47.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="84.0" y="142.0">one...</text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 1.97%)</title><rect x="128.8" y="131.0" width="23.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.8" y="142.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (18 samples, 1.97%)</title><rect x="128.8" y="115.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.8" y="126.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (18 samples, 1.97%)</title><rect x="128.8" y="99.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.8" y="110.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 1.97%)</title><rect x="128.8" y="83.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.8" y="94.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18 samples, 1.97%)</title><rect x="128.8" y="67.0" width="23.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="131.8" y="78.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (20 samples, 2.19%)</title><rect x="152.0" y="179.0" width="25.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.0" y="190.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 2.19%)</title><rect x="152.0" y="163.0" width="25.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.0" y="174.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 2.19%)</title><rect x="152.0" y="147.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.0" y="158.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 2.19%)</title><rect x="152.0" y="131.0" width="25.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.0" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (3 samples, 0.33%)</title><rect x="152.0" y="115.0" width="3.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="155.0" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 1.86%)</title><rect x="155.9" y="115.0" width="21.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.9" y="126.0">j..</text>
</g>
<g>
<title>byte[] (17 samples, 1.86%)</title><rect x="155.9" y="99.0" width="21.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="158.9" y="110.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/jhoysbou/LsmServer.putValue (525 samples, 57.44%)</title><rect x="177.8" y="179.0" width="677.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.8" y="190.0">ru/mail/polis/service/jhoysbou/LsmServer.putValue</text>
</g>
<g>
<title>java/lang/String.getBytes (19 samples, 2.08%)</title><rect x="177.8" y="163.0" width="24.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.8" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (19 samples, 2.08%)</title><rect x="177.8" y="147.0" width="24.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.8" y="158.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (19 samples, 2.08%)</title><rect x="177.8" y="131.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.8" y="142.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 2.08%)</title><rect x="177.8" y="115.0" width="24.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.8" y="126.0">j..</text>
</g>
<g>
<title>byte[] (19 samples, 2.08%)</title><rect x="177.8" y="99.0" width="24.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="180.8" y="110.0">b..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (56 samples, 6.13%)</title><rect x="202.4" y="163.0" width="72.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.4" y="174.0">java/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (56 samples, 6.13%)</title><rect x="202.4" y="147.0" width="72.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="158.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (56 samples, 6.13%)</title><rect x="202.4" y="131.0" width="72.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="205.4" y="142.0">java.nio..</text>
</g>
<g>
<title>one.nio.http.Response (18 samples, 1.97%)</title><rect x="274.7" y="163.0" width="23.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="277.7" y="174.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (39 samples, 4.27%)</title><rect x="297.9" y="163.0" width="50.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.9" y="174.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (18 samples, 1.97%)</title><rect x="297.9" y="147.0" width="23.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="300.9" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (21 samples, 2.30%)</title><rect x="321.1" y="147.0" width="27.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="324.1" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao.upsert (393 samples, 43.00%)</title><rect x="348.2" y="163.0" width="507.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.2" y="174.0">ru/mail/polis/dao/jhoysbou/LsmDao.upsert</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao.flush (356 samples, 38.95%)</title><rect x="348.2" y="147.0" width="459.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.2" y="158.0">ru/mail/polis/dao/jhoysbou/LsmDao.flush</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/SSTable.serialize (356 samples, 38.95%)</title><rect x="348.2" y="131.0" width="459.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.2" y="142.0">ru/mail/polis/dao/jhoysbou/SSTable.serialize</text>
</g>
<g>
<title>java/lang/Integer.valueOf (53 samples, 5.80%)</title><rect x="348.2" y="115.0" width="68.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.2" y="126.0">java/la..</text>
</g>
<g>
<title>java.lang.Integer (53 samples, 5.80%)</title><rect x="348.2" y="99.0" width="68.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="351.2" y="110.0">java.la..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (230 samples, 25.16%)</title><rect x="416.7" y="115.0" width="296.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.7" y="126.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (155 samples, 16.96%)</title><rect x="416.7" y="99.0" width="200.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="419.7" y="110.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (75 samples, 8.21%)</title><rect x="616.8" y="99.0" width="96.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.8" y="110.0">java/nio/He..</text>
</g>
<g>
<title>byte[] (75 samples, 8.21%)</title><rect x="616.8" y="83.0" width="96.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="619.8" y="94.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.55%)</title><rect x="713.6" y="115.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="716.6" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.55%)</title><rect x="713.6" y="99.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.6" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.55%)</title><rect x="713.6" y="83.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.6" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.55%)</title><rect x="713.6" y="67.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.6" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.55%)</title><rect x="713.6" y="51.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.6" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.55%)</title><rect x="713.6" y="35.0" width="6.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="716.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/Value.getData (68 samples, 7.44%)</title><rect x="720.1" y="115.0" width="87.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.1" y="126.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (68 samples, 7.44%)</title><rect x="720.1" y="99.0" width="87.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.1" y="110.0">java/nio/H..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (68 samples, 7.44%)</title><rect x="720.1" y="83.0" width="87.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="723.1" y="94.0">java.nio.H..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/MemTable.upsert (37 samples, 4.05%)</title><rect x="807.9" y="147.0" width="47.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.9" y="158.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.jhoysbou.Value (37 samples, 4.05%)</title><rect x="807.9" y="131.0" width="47.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="810.9" y="142.0">ru.m..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (18 samples, 1.97%)</title><rect x="855.6" y="195.0" width="23.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.6" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 1.97%)</title><rect x="855.6" y="179.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.6" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (18 samples, 1.97%)</title><rect x="855.6" y="163.0" width="23.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="858.6" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (18 samples, 1.97%)</title><rect x="855.6" y="147.0" width="23.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="858.6" y="158.0">j..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (77 samples, 8.42%)</title><rect x="878.9" y="227.0" width="99.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="881.9" y="238.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (1 samples, 0.11%)</title><rect x="878.9" y="211.0" width="1.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="881.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (38 samples, 4.16%)</title><rect x="880.2" y="211.0" width="49.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="883.2" y="222.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (38 samples, 4.16%)</title><rect x="880.2" y="195.0" width="49.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="883.2" y="206.0">java...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (38 samples, 4.16%)</title><rect x="929.2" y="211.0" width="49.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="932.2" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (38 samples, 4.16%)</title><rect x="929.2" y="195.0" width="49.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.2" y="206.0">one/n..</text>
</g>
<g>
<title>char[] (18 samples, 1.97%)</title><rect x="929.2" y="179.0" width="23.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="932.2" y="190.0">c..</text>
</g>
<g>
<title>java.lang.String (20 samples, 2.19%)</title><rect x="952.5" y="179.0" width="25.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="955.5" y="190.0">j..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (18 samples, 1.97%)</title><rect x="978.3" y="227.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.3" y="238.0">o..</text>
</g>
<g>
<title>byte[] (18 samples, 1.97%)</title><rect x="978.3" y="211.0" width="23.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="981.3" y="222.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (128 samples, 14.00%)</title><rect x="1001.5" y="227.0" width="165.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1004.5" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (128 samples, 14.00%)</title><rect x="1001.5" y="211.0" width="165.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1004.5" y="222.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (55 samples, 6.02%)</title><rect x="1001.5" y="195.0" width="71.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1004.5" y="206.0">char[]</text>
</g>
<g>
<title>java.lang.String (19 samples, 2.08%)</title><rect x="1072.5" y="195.0" width="24.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1075.5" y="206.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (54 samples, 5.91%)</title><rect x="1097.0" y="195.0" width="69.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.0" y="206.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (54 samples, 5.91%)</title><rect x="1097.0" y="179.0" width="69.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1100.0" y="190.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (54 samples, 5.91%)</title><rect x="1097.0" y="163.0" width="69.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.0" y="174.0">java/la..</text>
</g>
<g>
<title>byte[] (54 samples, 5.91%)</title><rect x="1097.0" y="147.0" width="69.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1100.0" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 1.97%)</title><rect x="1166.8" y="243.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1169.8" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (18 samples, 1.97%)</title><rect x="1166.8" y="227.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1169.8" y="238.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 1.97%)</title><rect x="1166.8" y="211.0" width="23.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1169.8" y="222.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18 samples, 1.97%)</title><rect x="1166.8" y="195.0" width="23.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1169.8" y="206.0">j..</text>
</g>
</g>
</svg>
