<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (165 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>jdk/internal/misc/InnocuousThread.run (1 samples, 0.61%)</title><rect x="10.0" y="739.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.61%)</title><rect x="10.0" y="723.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/ref/CleanerImpl.run (1 samples, 0.61%)</title><rect x="10.0" y="707.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.61%)</title><rect x="10.0" y="691.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.61%)</title><rect x="10.0" y="675.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.61%)</title><rect x="10.0" y="659.0" width="7.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.61%)</title><rect x="10.0" y="643.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.61%)</title><rect x="10.0" y="627.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.61%)</title><rect x="10.0" y="611.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.61%)</title><rect x="10.0" y="595.0" width="7.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (158 samples, 95.76%)</title><rect x="17.2" y="739.0" width="1129.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (70 samples, 42.42%)</title><rect x="17.2" y="723.0" width="500.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.2" y="734.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (70 samples, 42.42%)</title><rect x="17.2" y="707.0" width="500.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="718.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (70 samples, 42.42%)</title><rect x="17.2" y="691.0" width="500.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="702.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (70 samples, 42.42%)</title><rect x="17.2" y="675.0" width="500.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="686.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (65 samples, 39.39%)</title><rect x="17.2" y="659.0" width="464.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="670.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 1.82%)</title><rect x="24.3" y="643.0" width="21.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="27.3" y="654.0">J..</text>
</g>
<g>
<title>kevent (61 samples, 36.97%)</title><rect x="45.8" y="643.0" width="436.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="48.8" y="654.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 1.82%)</title><rect x="482.0" y="659.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.0" y="670.0">s..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.61%)</title><rect x="482.0" y="643.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.61%)</title><rect x="482.0" y="627.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 1.21%)</title><rect x="489.2" y="643.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.61%)</title><rect x="496.3" y="627.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.61%)</title><rect x="496.3" y="611.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.61%)</title><rect x="496.3" y="595.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.61%)</title><rect x="496.3" y="579.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 1.21%)</title><rect x="503.5" y="659.0" width="14.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.5" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 1.21%)</title><rect x="503.5" y="643.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.61%)</title><rect x="503.5" y="627.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="506.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.61%)</title><rect x="503.5" y="611.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.5" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.61%)</title><rect x="510.6" y="627.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="513.6" y="638.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.61%)</title><rect x="510.6" y="611.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.61%)</title><rect x="510.6" y="595.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (88 samples, 53.33%)</title><rect x="517.8" y="723.0" width="629.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.8" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.61%)</title><rect x="517.8" y="707.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (87 samples, 52.73%)</title><rect x="524.9" y="707.0" width="622.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.9" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (76 samples, 46.06%)</title><rect x="524.9" y="691.0" width="543.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.9" y="702.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (71 samples, 43.03%)</title><rect x="532.1" y="675.0" width="507.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.1" y="686.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (71 samples, 43.03%)</title><rect x="532.1" y="659.0" width="507.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.1" y="670.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_putValue.handleRequest (71 samples, 43.03%)</title><rect x="532.1" y="643.0" width="507.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="535.1" y="654.0">RequestHandler3_putValue.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (55 samples, 33.33%)</title><rect x="532.1" y="627.0" width="393.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.1" y="638.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (54 samples, 32.73%)</title><rect x="539.2" y="611.0" width="386.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.2" y="622.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 1.82%)</title><rect x="546.4" y="595.0" width="21.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.4" y="606.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 30.30%)</title><rect x="567.8" y="595.0" width="357.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.8" y="606.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 30.30%)</title><rect x="567.8" y="579.0" width="357.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.8" y="590.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (48 samples, 29.09%)</title><rect x="567.8" y="563.0" width="343.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.8" y="574.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (48 samples, 29.09%)</title><rect x="567.8" y="547.0" width="343.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="570.8" y="558.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (48 samples, 29.09%)</title><rect x="567.8" y="531.0" width="343.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.8" y="542.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.61%)</title><rect x="567.8" y="515.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.61%)</title><rect x="567.8" y="499.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.61%)</title><rect x="567.8" y="483.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="570.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.61%)</title><rect x="567.8" y="467.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.61%)</title><rect x="567.8" y="451.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="570.8" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.61%)</title><rect x="567.8" y="435.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="570.8" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.61%)</title><rect x="567.8" y="419.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (1 samples, 0.61%)</title><rect x="575.0" y="515.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (46 samples, 27.88%)</title><rect x="582.1" y="515.0" width="329.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="585.1" y="526.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (46 samples, 27.88%)</title><rect x="582.1" y="499.0" width="329.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="585.1" y="510.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.61%)</title><rect x="582.1" y="483.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="585.1" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.61%)</title><rect x="582.1" y="467.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (1 samples, 0.61%)</title><rect x="582.1" y="451.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="585.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (1 samples, 0.61%)</title><rect x="582.1" y="435.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (45 samples, 27.27%)</title><rect x="589.3" y="483.0" width="321.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="592.3" y="494.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (45 samples, 27.27%)</title><rect x="589.3" y="467.0" width="321.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.3" y="478.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (45 samples, 27.27%)</title><rect x="589.3" y="451.0" width="321.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="592.3" y="462.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>write (43 samples, 26.06%)</title><rect x="603.6" y="435.0" width="307.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="606.6" y="446.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.21%)</title><rect x="911.1" y="563.0" width="14.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.1" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.61%)</title><rect x="918.2" y="547.0" width="7.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="921.2" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.61%)</title><rect x="918.2" y="531.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="921.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/jhoysbou/LsmServer.putValue (16 samples, 9.70%)</title><rect x="925.4" y="627.0" width="114.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.4" y="638.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.61%)</title><rect x="932.5" y="611.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.61%)</title><rect x="932.5" y="595.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.5" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.61%)</title><rect x="932.5" y="579.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="935.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.61%)</title><rect x="932.5" y="563.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/LsmDao.upsert (14 samples, 8.48%)</title><rect x="939.7" y="611.0" width="100.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="942.7" y="622.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/jhoysbou/MemTable.upsert (14 samples, 8.48%)</title><rect x="939.7" y="595.0" width="100.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="942.7" y="606.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/TreeMap.put (14 samples, 8.48%)</title><rect x="939.7" y="579.0" width="100.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="942.7" y="590.0">java/util/Tr..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 6.67%)</title><rect x="961.2" y="563.0" width="78.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.2" y="574.0">java/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 6.06%)</title><rect x="968.3" y="547.0" width="71.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.3" y="558.0">java/nio..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 6.06%)</title><rect x="968.3" y="531.0" width="71.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="971.3" y="542.0">java/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 1.82%)</title><rect x="1039.8" y="675.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1042.8" y="686.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.21%)</title><rect x="1039.8" y="659.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.8" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.21%)</title><rect x="1039.8" y="643.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.61%)</title><rect x="1047.0" y="627.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.0" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.61%)</title><rect x="1047.0" y="611.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.61%)</title><rect x="1047.0" y="595.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.61%)</title><rect x="1047.0" y="579.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.0" y="590.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.61%)</title><rect x="1047.0" y="563.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.61%)</title><rect x="1047.0" y="547.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1050.0" y="558.0"></text>
</g>
<g>
<title>G1Allocator::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.61%)</title><rect x="1047.0" y="531.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.61%)</title><rect x="1054.1" y="659.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1057.1" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.61%)</title><rect x="1054.1" y="643.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.61%)</title><rect x="1061.3" y="675.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.61%)</title><rect x="1061.3" y="659.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.3" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 6.67%)</title><rect x="1068.4" y="691.0" width="78.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1071.4" y="702.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (11 samples, 6.67%)</title><rect x="1068.4" y="675.0" width="78.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1071.4" y="686.0">one/nio/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (11 samples, 6.67%)</title><rect x="1068.4" y="659.0" width="78.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.4" y="670.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 6.67%)</title><rect x="1068.4" y="643.0" width="78.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1071.4" y="654.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 6.67%)</title><rect x="1068.4" y="627.0" width="78.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.4" y="638.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (10 samples, 6.06%)</title><rect x="1068.4" y="611.0" width="71.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.4" y="622.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (10 samples, 6.06%)</title><rect x="1068.4" y="595.0" width="71.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.4" y="606.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (10 samples, 6.06%)</title><rect x="1068.4" y="579.0" width="71.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.4" y="590.0">sun/nio/..</text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.61%)</title><rect x="1068.4" y="563.0" width="7.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1071.4" y="574.0"></text>
</g>
<g>
<title>rpc_errlist (9 samples, 5.45%)</title><rect x="1075.6" y="563.0" width="64.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1078.6" y="574.0">rpc_err..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.61%)</title><rect x="1139.9" y="611.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1142.9" y="622.0"></text>
</g>
<g>
<title>thread_start (6 samples, 3.64%)</title><rect x="1147.1" y="739.0" width="42.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1150.1" y="750.0">thre..</text>
</g>
<g>
<title>_pthread_start (6 samples, 3.64%)</title><rect x="1147.1" y="723.0" width="42.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1150.1" y="734.0">_pth..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 3.64%)</title><rect x="1147.1" y="707.0" width="42.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1150.1" y="718.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (6 samples, 3.64%)</title><rect x="1147.1" y="691.0" width="42.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.1" y="702.0">Thre..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 1.21%)</title><rect x="1147.1" y="675.0" width="14.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="686.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 1.21%)</title><rect x="1147.1" y="659.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.1" y="670.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 1.21%)</title><rect x="1147.1" y="643.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.1" y="654.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.21%)</title><rect x="1147.1" y="627.0" width="14.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.1" y="638.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.21%)</title><rect x="1147.1" y="611.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.1" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 1.21%)</title><rect x="1147.1" y="595.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.1" y="606.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.61%)</title><rect x="1147.1" y="579.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1150.1" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.61%)</title><rect x="1154.2" y="579.0" width="7.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1157.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 1.82%)</title><rect x="1161.4" y="675.0" width="21.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="686.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 1.21%)</title><rect x="1161.4" y="659.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 1.21%)</title><rect x="1161.4" y="643.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="654.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.21%)</title><rect x="1161.4" y="627.0" width="14.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.4" y="638.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 1.21%)</title><rect x="1161.4" y="611.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="622.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 1.21%)</title><rect x="1161.4" y="595.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.61%)</title><rect x="1161.4" y="579.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.61%)</title><rect x="1161.4" y="563.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.61%)</title><rect x="1161.4" y="547.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.61%)</title><rect x="1161.4" y="531.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="542.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.61%)</title><rect x="1161.4" y="515.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1168.5" y="579.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1168.5" y="563.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1168.5" y="547.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1168.5" y="531.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1168.5" y="515.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1168.5" y="499.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1168.5" y="483.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1168.5" y="467.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1168.5" y="451.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1168.5" y="435.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.5" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1168.5" y="419.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1168.5" y="403.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1168.5" y="387.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1168.5" y="371.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1168.5" y="355.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1168.5" y="339.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.61%)</title><rect x="1168.5" y="323.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.61%)</title><rect x="1168.5" y="307.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="318.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.61%)</title><rect x="1168.5" y="291.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.61%)</title><rect x="1168.5" y="275.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.61%)</title><rect x="1168.5" y="259.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.61%)</title><rect x="1168.5" y="243.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.61%)</title><rect x="1168.5" y="227.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.61%)</title><rect x="1168.5" y="211.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.61%)</title><rect x="1168.5" y="195.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.61%)</title><rect x="1168.5" y="179.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.5" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.61%)</title><rect x="1168.5" y="163.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1168.5" y="147.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1168.5" y="131.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1168.5" y="115.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="126.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1168.5" y="99.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.5" y="110.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.61%)</title><rect x="1168.5" y="83.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.61%)</title><rect x="1168.5" y="67.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1168.5" y="51.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.5" y="62.0"></text>
</g>
<g>
<title>int GrowableArray&lt;ciMetadata*&gt;::find_sorted&lt;Metadata*, &amp;(ciObjectFactory::metadata_compare(Metadata* const&amp;, ciMetadata* const&amp;))&gt;(Metadata* const&amp;, bool&amp;) (1 samples, 0.61%)</title><rect x="1168.5" y="35.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="46.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.61%)</title><rect x="1175.7" y="659.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.61%)</title><rect x="1175.7" y="643.0" width="7.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1178.7" y="654.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.61%)</title><rect x="1175.7" y="627.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.61%)</title><rect x="1175.7" y="611.0" width="7.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.61%)</title><rect x="1175.7" y="595.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.61%)</title><rect x="1175.7" y="579.0" width="7.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.61%)</title><rect x="1182.8" y="675.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.61%)</title><rect x="1182.8" y="659.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.61%)</title><rect x="1182.8" y="643.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.61%)</title><rect x="1182.8" y="627.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.61%)</title><rect x="1182.8" y="611.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.61%)</title><rect x="1182.8" y="595.0" width="7.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
</g>
</svg>
